(ns club.bhikers.position
  (:require
   ["package:flutter/foundation.dart" :as foundation]
   ["dart:async" :as async]
   ["dart:io" :as io]
   ["package:geolocator/geolocator.dart" :as geo]
   ["package:flutter_map_location_marker/flutter_map_location_marker.dart" :as maploc]
   [club.bhikers.utils :refer [debug-mode? log]]))


;; per device type location settings
(defn location-settings []
  (let [distance-filter (if debug-mode? 0 500) ; Update position every 500m...
        interval-duration (if debug-mode?
                            (Duration .seconds 5)
                            (Duration .minutes 5)) ; Update position every 5minutes...
        accuracy geo/LocationAccuracy.low]
    (cond
      ;; kIsWeb must be checked first because platform on web is throwing errors
      foundation/kIsWeb (geo/LocationSettings .accuracy accuracy
                                              .distanceFilter distance-filter)
      (io/Platform.isAndroid) (geo/AndroidSettings .accuracy accuracy
                                                   .intervalDuration interval-duration
                                                   .distanceFilter distance-filter
                                                   .forceLocationManager true) ; use legacy location manager to avoid google play services requirement
      (io/Platform.isIOS) (geo/AppleSettings .accuracy accuracy
                                             .pauseLocationUpdatesAutomatically true
                                             .distanceFilter distance-filter)
      :else (geo/LocationSettings .accuracy accuracy
                                  .distanceFilter distance-filter))))

(defn new-position-stream-controller ^#/(async/StreamController geo/Position?) []
  (let [cancel-functions (atom [])
        stream-controller (#/(async/StreamController.broadcast geo/Position?))
        location-settings* (location-settings)
        setup (fn [permission]
                (cond
                  ;; forbidden close: perm ko, add error & close stream controller
                  (or (== permission geo/LocationPermission.denied)
                      (== permission geo/LocationPermission.deniedForever))
                  (when (not (.-isClosed stream-controller))
                    (log "permission denied, closing stream controller")
                    (-> stream-controller .-sink (.addError maploc/PermissionDeniedException))
                    (await (.close stream-controller)))
                  ;; main clause: perm ok: check services and subscribe
                  (or (== permission geo/LocationPermission.whileInUse)
                      (== permission geo/LocationPermission.always))
                  (when (not (.-isClosed stream-controller))
                    (log "permission granted, setup stream controller")
                    (let [service-enabled? (await (.isLocationServiceEnabled geo/Geolocator))
                          status-stream-subscription (when (not foundation/kIsWeb)
                                                       (log "listen to service status strean")
                                                       (.listen
                                                        (.getServiceStatusStream geo/Geolocator)
                                                        (fn [status]
                                                          (if (not= status geo/ServiceStatus.enabled)
                                                            (do
                                                              (log "service status is disabled. error.")
                                                              (-> stream-controller .-sink (.addError maploc/ServiceDisabledException)))
                                                            (-> stream-controller .-sink (.add nil))))))
                          last-known-position (when (and service-enabled? (not foundation/kIsWeb))
                                                (log "await for last known position")
                                                (await (-> geo/Geolocator .getLastKnownPosition)))
                          position-subscription (do
                                                  (log "listening on position stream source")
                                                  (->
                                                   geo/Geolocator
                                                   (.getPositionStream .locationSettings location-settings*)
                                                   (.listen
                                                    (fn [position]
                                                      (when (not (.-isClosed stream-controller))
                                                        (log "new position, add to stream controller sink: " position)
                                                        (-> stream-controller .-sink (.add position)))))))]
                      (when last-known-position
                            (log "add last-known-position to stream controller sink: " last-known-position)
                            (-> stream-controller .-sink (.add last-known-position)))
                      (when status-stream-subscription (swap! cancel-functions conj #(.cancel status-stream-subscription)))
                      (when position-subscription (swap! cancel-functions conj #(.cancel position-subscription)))))

                  :else (-> stream-controller .-sink (.addError maploc/IncorrectSetupException))))]

    (doto stream-controller
      (.-onCancel!
       (fn []
         (log "cancelling stream controller listeners and closing!")
         (await (.wait Future (map #(%) @cancel-functions)))
         (.close stream-controller)))
      (.-onListen!
       (fn []
         (log "listening on position stream controller!")
         (try
           (let [permission (await (.checkPermission geo/Geolocator))]
             (log (str "location permission is " permission))
             (if (== permission geo/LocationPermission.denied)
               (do
                 (-> stream-controller .-sink (.addError maploc/PermissionDeniedException))
                 (setup (await (->  geo/Geolocator .requestPermission))))
               (setup permission)))

           (catch geo/PermissionDefinitionsNotFoundException _
             (-> stream-controller .-sink (.addError maploc/IncorrectSetupException)))))))
    stream-controller))


(defn new-position-bstream ^#/(async/Stream geo/Position?)
  [^#/(async/StreamController geo/Position?) controller]
  (log "starting position broadcast stream...")
  ;(.asBroadcastStream (.defaultPositionStreamSource (maploc/LocationMarkerDataStreamFactory)))
  (.asBroadcastStream (.-stream controller)
                      .onListen (fn [^#/(async/StreamSubscription geo/Position?) controller]
                                 (log "listening on position b-stream")
                                 (when (.-isPaused controller)
                                   (log "resumimg position b-stream controller")
                                   (.resume controller)
                                  ;; returning nil is important as callback must be void func
                                  nil))
                      .onCancel (fn  [^#/(async/StreamSubscription geo/Position?) controller]
                                 (log "pausing position b-stream controller")
                                 (.cancel controller)
                                  ;; returning nil is important as callback must be void func
                                 nil)))



;; location marker stream stream helpers / not used
;; from maploc, returns a stream of markers from a stream of locations
(defn ->location-marker-stream
  [^#/(async/Stream geo/Position?) stream]
  (log "convert position stream to location marker stream")
  (-> stream (.map (fn [^geo/Position? position]
                     (maploc/LocationMarkerPosition
                      .latitude (.-latitude position)
                      .longitude (.-longitude position)
                      .accuracy (.-accuracy position))))))

(defn subscribe-position-stream ^#/(async/StreamSubscription geo/Position?)
  [^#/(async/Stream geo/Position?) stream listener]
  (log "subscribe to position stream")
  (.listen stream (fn [^geo/Position? position]
                    (listener (.-latitude position)
                              (.-longitude position)))))
