(ns club.bhikers.screens.common
  (:require ["package:flutter/material.dart" :as m]
            [club.bhikers.lib.utils :refer [l10n-str]]
            [club.bhikers.lib.notifications
             :refer [dismiss-notif dismiss-all-notifs]]
            [club.bhikers.screens.debuglog :refer [debuglog-screen]]
            [club.bhikers.lib.app :refer [feat-enhance-gpx?
                                          feat-fall-detector?
                                          app-info]]
            [cljd.flutter :as f]))

;; Setup main drawer with app routes
(defn drawer []
  (f/widget
   :get [m/Navigator
         m/Theme]
   :let [drawer-routes (concat [["/around-me"
                                 (l10n-str "around_me.screen_title")
                                 m/Icons.location_pin]]
                               (if (not feat-enhance-gpx?) []
                                   [["/enhance-gpx"
                                     (l10n-str "enhance_gpx.screen_title")
                                     m/Icons.hotel_class_outlined]])
                               (if (not feat-fall-detector?) []
                                   [["/fall-detector"
                                     (l10n-str "fall_detector.screen_title")
                                     m/Icons.crisis_alert]])
                               [["/settings"
                                 (l10n-str "settings.screen_title")
                                 m/Icons.settings]])]
   m/Drawer
   (m/ListView
    .padding (m/EdgeInsets.all 2.0)
    .children (concat
               [(m/UserAccountsDrawerHeader
                 .accountName (m/Text "Anonymous")
                 .accountEmail (m/Text "foo@bar.com")
                 .currentAccountPicture (m/CircleAvatar .child (m/Text "JD")))]
               (map (fn [[route title icon]]
                      (m/ListTile
                       .leading (m/Icon icon)
                       .title (m/Text title)
                       .onTap
                       (fn []
                         (.pop navigator)
                         (.pushNamed navigator route)
                         nil)))
                    drawer-routes)
               [(m/AboutListTile
                 .icon (m/Icon m/Icons.info)
                 .applicationIcon nil
                 .applicationName (get @app-info :app-name)
                 .applicationVersion (str (get @app-info :build-name) "+" (get @app-info :build-number)
                                          " (" (get @app-info :git-commit) ")")
                 .applicationLegalese (l10n-str "about.legalese")
                 .aboutBoxChildren [(m/SizedBox .height 24)
                                    (m/RichText .text (m/TextSpan .style (-> theme .-textTheme .-bodyMedium)
                                                                  .text (l10n-str "about.description")))])]))))

(defn notifications-list-widget []
  (f/widget
   :get [:notifications]
   :watch [*notifs notifications]
   (m/ListView
    .padding (m/EdgeInsets.all 2.0)
    .children
    (into [(m/ListTile
            .leading (m/Icon m/Icons.notification_important)
            .title (m/Text (l10n-str "notifications.title"))
            .trailing (m/IconButton
                       .icon (m/Icon m/Icons.delete_sweep)
                       .tooltip (l10n-str "notifications.dismiss_all")
                       .onPressed #(dismiss-all-notifs)))]
          (map
           (fn [[id txt]] (m/Dismissible
                           .key (m/ValueKey id)
                           .onDismissed (fn [_] (dismiss-notif id))
                           .child (m/ListTile .title (m/Text txt))))
           *notifs)))))

(defn notifications-button []
  (f/widget
   :context ctx
   :get [:notifications]
   :watch [*notifs notifications]
   (m/Stack .children
            (let [nb-notifs (count *notifs)]
              (if (> 1 nb-notifs)
                []
                [(m/IconButton .icon (m/Icon m/Icons.notification_important)
                               .tooltip "important"
                               .onPressed (fn []
                                            (m/showModalBottomSheet
                                             .context ctx
                                             .builder (f/build
                                                       (f/widget
                                                        (m/Container .height 300)
                                                        (notifications-list-widget))))
                                            nil))
                 (f/widget
                  (m/Positioned .right 12 .top 12)
                  (m/Container  .padding (m/EdgeInsets.all 5)
                                .decoration (m/BoxDecoration
                                             .shape m/BoxShape.circle
                                             .color m/Colors.red)
                                .constraints (m/BoxConstraints
                                              .minWidth 5
                                              .minHeight 5)))])))))

(defn debuglog-screen-button []
  (f/widget :get [m/Navigator]
            (m/IconButton .icon (m/Icon m/Icons.article)
                          .tooltip "logs"
                          .onPressed (fn []
                                       (.push navigator
                                              (m/MaterialPageRoute
                                               .builder (f/build [] (debuglog-screen))))
                                       nil))))

(defn app-bar [& {:keys [title
                         additional-actions]
                  :or {title "app.title"
                       additional-actions []}}]
  (m/AppBar .title (m/Text (l10n-str title))
            .actions (concat
                      [(debuglog-screen-button)
                       (notifications-button)]
                      additional-actions)))
