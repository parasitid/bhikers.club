(ns club.bhikers.screens.settings
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter_settings_screens/flutter_settings_screens.dart" :as settings]
            ["package:easy_localization/easy_localization.dart" :as l10n]
            [club.bhikers.screens.common :refer [app-bar drawer]]
            [club.bhikers.lib.utils :refer [l10n-str
                                            str->int
                                            str->location-accuracy
                                            location-accuracy->str]]
            [club.bhikers.lib.logging :as logging]
            [club.bhikers.lib.app :refer [supported-poi-types selected-poi-type
                                          supported-locales default-locale
                                          force-debug-mode?
                                          max-pois-radius
                                          min-pois-radius
                                          pois-radius
                                          api-query-timeout
                                          feat-fall-detector?
                                          refresh-location-distance-filter
                                          refresh-location-interval-duration
                                          refresh-location-accuracy]]
            [cljd.flutter :as f]))


;; Setup settings screen
;; setup various settings options
(defn settings-screen []
  (m/Scaffold
   .appBar (app-bar)
   .drawer (drawer)
   .body (f/widget
          :context ctx
          m/Container
          (settings/SettingsScreen
           .title  (l10n-str "settings.screen_title")
           .children
           (concat
            [(settings/SettingsGroup
              .title  (l10n-str "settings.general_group_title")
              .children
              [(settings/SliderSettingsTile
                .leading (m/Icon m/Icons.adjust)
                .settingKey "/general/pois-radius"
                .title (l10n-str "common.radius")
                .defaultValue 1000
                .min min-pois-radius
                .max max-pois-radius
                .onChange #(swap! pois-radius (constantly %))
                .step 500)
               (#/(settings/DropDownSettingsTile String)
                .leading (m/Icon m/Icons.location_searching)
                .settingKey "/general/default-poi-type"
                .title  (l10n-str "settings.default_poi_type")
                .values (into {} (map (fn [poi] [poi (l10n-str (str "around_me.pois." poi))])
                                      supported-poi-types))
                .selected @selected-poi-type
                .onChange #(swap! selected-poi-type (constantly %)))
               (#/(settings/DropDownSettingsTile String)
                .leading (m/Icon m/Icons.language)
                .settingKey "/general/language"
                .title  (l10n-str "settings.language")
                .values (into {} (map (fn [lang] [lang (l10n-str (str "settings.langs." lang))])
                                      supported-locales))
                .selected default-locale
                .onChange #(do (-> ctx
                                   l10n/BuildContextEasyLocalizationExtension
                                   (.setLocale (m/Locale %)))
                               nil))])]
            [(settings/SettingsGroup
              .title  (l10n-str "settings.advanced_location_title")
              .children
              [(settings/TextInputSettingsTile
                .settingKey "/advanced-location/refresh-location-distance-filter"
                .title (l10n-str "settings.location_distance_filter")
                .keyboardType m/TextInputType.number
                .onChange #(let [distance (str->int % 0 10000)]
                             (when distance (swap! refresh-location-distance-filter (constantly distance))))
                .validator #(when (not (str->int % 0 10000))
                              (l10n-str "settings.distance_filter_input_validation_error"))
                .initialValue (str @refresh-location-distance-filter))])
             (#/(settings/DropDownSettingsTile String)
              .leading (m/Icon m/Icons.location_searching)
              .settingKey "/advanced-location/refresh-location-accuracy"
              .title  (l10n-str "settings.refresh_location_accuracy")
              .values {"low" (l10n-str "settings.location_accuracy_low")
                       "medium" (l10n-str "settings.location_accuracy_medium")
                       "high" (l10n-str "settings.location_accuracy_high")}
              .selected (location-accuracy->str @refresh-location-accuracy)
              .onChange #(swap! refresh-location-accuracy (constantly (str->location-accuracy %))))
             (#/(settings/DropDownSettingsTile int) ;; it has to be string because shared prefs only stores strings
              .leading (m/Icon m/Icons.location_searching)
              .settingKey "/advanced-location/refresh-location-interval-duration"
              .title  (l10n-str "settings.refresh_location_interval_duration")
              .values {5 "5s"
                       30 "30s"
                       60 "1m"
                       (* 5 60) "5m"
                       (* 10 60) "10m"
                       (* 30 60) "30m"
                       (* 60 60) "1h"}
              .selected (.-inSeconds ^Duration @refresh-location-interval-duration)
              .onChange #(swap! refresh-location-interval-duration (constantly
                                                                    (Duration .seconds %))))]
            [(settings/SettingsGroup
              .title  (l10n-str "settings.advanced_group_title")
              .children
              [(settings/TextInputSettingsTile
                .settingKey "/advanced/api-query-timeout"
                .title (l10n-str "settings.api_query_timeout")
                .keyboardType m/TextInputType.number
                .onChange #(let [timeout (str->int % 2 10)]
                             (when timeout (swap! api-query-timeout (constantly timeout))))
                .validator #(when (not (str->int % 2 10))
                              (l10n-str "settings.timeout_input_validation_error"))
                .initialValue (str @api-query-timeout))
               (settings/SwitchSettingsTile
                .leading (m/Icon m/Icons.bug_report)
                .settingKey "/advanced/debug-mode?"
                .title (l10n-str "settings.debug_mode")
                .onChange #(swap! force-debug-mode? (constantly %)))])])))))
