(ns club.bhikers.screens.aroundme
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter_map/flutter_map.dart" :as fmap]
            ["package:latlong2/latlong.dart" :refer [LatLng]]
            ["package:flutter_map_location_marker/flutter_map_location_marker.dart" :as maploc]
            ["package:flutter_map_cancellable_tile_provider/flutter_map_cancellable_tile_provider.dart"
             :refer [CancellableNetworkTileProvider]]
            ["package:flutter_map_compass/flutter_map_compass.dart" :refer [MapCompass]]
            ["package:url_launcher/link.dart" :refer [Link LinkTarget]]
            ["package:flutter_map_marker_cluster/flutter_map_marker_cluster.dart"
             :refer [MarkerClusterLayerWidget MarkerClusterLayerOptions]]
            [club.bhikers.lib.app :refer [supported-poi-types
                                          max-pois-radius
                                          icicommencelaventure
                                          vertouplage]]
            [club.bhikers.lib.map :as map]
            [club.bhikers.screens.common :refer [app-bar drawer]]
            [club.bhikers.lib.pois :refer [dynamic-map-pois route-to-poi edit-poi]]
            [club.bhikers.lib.utils :refer [l10n-str log debug-mode?]]
            [cljd.flutter :as f]))

;; Around me ( +/- 10/20km): POIs*
;; Enhance GPX: upload gpx and add POIs*
;; Fall Detector Alert: use accelerometer to detect fall or no movement
;; Settings: avatar, sms/signal/telegram accounts to send alerts
;;
;; *POIs: bhikers, bakeries+resto, hotels+campings+spots, foutains for bottle refills

;; Setup default values

;; Around me Screen

;; setup around me right menu to select POIs on map
(defn around-me-enddrawer []
  (f/widget
   :get [:map-state
         m/Navigator]
   :watch [{:keys [selected-poi-type transient-radius]} map-state]
   m/Drawer
   (m/ListView
    .padding (m/EdgeInsets.all 2.0)
    .children
    (concat
     (map (fn [poi] (m/RadioListTile
                     .title (m/Text (l10n-str (str "around_me.pois." poi)))
                     .value poi
                     .groupValue selected-poi-type
                     .onChanged (fn [val]
                                  (when (not= val (get @map-state :selected-poi-type))
                                    (log "changed poi type to " val)
                                    (swap! map-state assoc :selected-poi-type val)
                                    (.pop navigator)))))
          supported-poi-types)
     [(m/Row
       .children
       [(m/Text (l10n-str "common.radius"))
        (m/Slider
         .value transient-radius
         .max max-pois-radius
         .divisions 5
         .label (str transient-radius "m")
         .onChanged #(swap! map-state assoc :transient-radius (.round ^double %))
         .onChangeEnd (fn [_] (swap! map-state assoc :radius transient-radius)))])]))))

  ; Filter out blacklisted keys

(defonce priority-list ["name" "phone" "contact:phone" "website" "email"])

(defn basic-converter [scheme icon]
  (fn [value]
    (f/widget
     (Link .uri (Uri.parse (str scheme value))
           .target LinkTarget.blank
           .builder (f/build [open-link]
                             (f/widget
                              (m/TextButton.icon .onPressed open-link
                                                 .label (m/Text value .overflow m/TextOverflow.ellipsis .softWrap true .maxLines 2)
                                                 .icon (m/Icon icon))))))))

(defonce phone-converter (basic-converter "tel://" m/Icons.call))
(defonce email-converter (basic-converter "mailto://" m/Icons.email))
(defonce website-converter (basic-converter "" m/Icons.open_in_browser))

(defonce converters {
   "phone" phone-converter
   "mobile" phone-converter
   "contact:phone" phone-converter
   "contact:mobile" phone-converter
   "contact:email" email-converter
   "contact:website" website-converter
   "contact:facebook" website-converter
   "contact:instagram" website-converter
   "email" email-converter
   "website" website-converter
   })

(defn tag->widget [[key value]]
  [key (if-let [converter (get converters key)]
         (converter value) ;; Apply conversion if a function exists
         (m/Text value .overflow m/TextOverflow.ellipsis .softWrap true .maxLines 2))])

(defn prioritize-attributes [tags]
  (let [widgets (into {} (map tag->widget tags))
        prioritized-widgets (map (fn [key] (when-let [value (get widgets key)] [key value]))
                                 priority-list)
        other-widgets (into {} (filter #(not ((set priority-list) (key %))) widgets))]
    (concat
     (filter some? prioritized-widgets)    ; Only include non-nil prioritized tags
     other-widgets)))

;; modal bottom sheet displaying info about a POI
(defn around-me-show-poi-info [ctx poi]
  (m/showModalBottomSheet
   .context ctx
   .builder (f/build
             (f/widget
              (m/Container .height 300 .padding (m/EdgeInsets.all 16))
              (m/Column .mainAxisSize m/MainAxisSize.min
                        .children [(m/Row
                                    .mainAxisAlignment m/MainAxisAlignment.end
                                    .children [(m/IconButton .icon (m/Icon m/Icons.edit .size 30)
                                                             .tooltip (l10n-str "edit-everydoor")
                                                             .onPressed #(do (edit-poi poi)
                                                                             nil))
                                               (m/IconButton .icon (m/Icon m/Icons.turn_right .size 30)
                                                             .tooltip (l10n-str "route-to-poi")
                                                             .onPressed #(do (route-to-poi poi)
                                                                             nil))])
                                   (m/SizedBox .height 16)
                                   (f/widget
                                    m/Expanded
                                    m/SingleChildScrollView
                                    (m/Column
                                     .crossAxisAlignment m/CrossAxisAlignment.stretch
                                     .children (map (fn [[name value]]
                                                      (f/widget
                                                       (m/Padding .padding (m/EdgeInsets.all 8))
                                                       (m/Row .mainAxisAlignment m/MainAxisAlignment.start
                                                              .children [(f/widget
                                                                          m/Flexible
                                                                          (m/Text (str (l10n-str name) ": " )
                                                                                  .style (m/TextStyle .fontWeight m/FontWeight.bold)
                                                                                  .overflow m/TextOverflow.ellipsis))
                                                                         (f/widget
                                                                          m/Expanded
                                                                          value)])))
                                                    (prioritize-attributes (get poi "tags" {})))))])))))

;; widget for POI markers on map
;; - watch map-state current position & selected poi type
;; - get and extract json data from overpass-api-de accordingly
;; - return a widget of markers for each element returned
;; - if no response or error, return empty widget
(defn around-me-pois-markers-widget []
  (f/widget
   :context ctx :get [:map-state :overpass-api]
   :watch [pois (dynamic-map-pois map-state overpass-api)]
   (MarkerClusterLayerWidget
    .options
    (MarkerClusterLayerOptions
     .maxClusterRadius 100
     .size (m/Size 40 40)
     .alignment m/Alignment.center
     .padding (m/EdgeInsets.all 50)
     .centerMarkerOnClick false
     .maxZoom 15
     .builder (fn [_ markers]
                (f/widget
                 (m/Container
                  .decoration (m/BoxDecoration .borderRadius (m/BorderRadius.circular 20)
                                               .color m/Colors.blue))
                 (m/Center .child
                           (m/Text (str (count markers))
                                   .style (m/TextStyle .color m/Colors.white)))))
     .markers (map #(fmap/Marker .point (LatLng (get % "lat") (get % "lon"))
                                 .height 40
                                 .width 40
                                 .child (m/GestureDetector
                                         .onTap (fn [] (around-me-show-poi-info ctx %))
                                         .child (m/Icon m/Icons.location_pin .size 40)))
                   pois)))))


;; Setup around me main screen with Flutter Map,
;; centered on device's current position
;; with markers representing selected POIs in a certain radius
;; around current position
(defn new-current-center-marker [current-pos-as-center? current-center]
  (if (and current-center (not current-pos-as-center?))
    (let [[lat lon] current-center]
      (maploc/AnimatedLocationMarkerLayer
       .position (maploc/LocationMarkerPosition .latitude lat .longitude lon .accuracy 0)))
    (m/Container)))

(defn new-current-location-marker-style [current-pos-as-center? theme]
  (maploc/LocationMarkerStyle
   .showAccuracyCircle false
   .showHeadingSector false
   .marker (maploc/DefaultLocationMarker
            .color (if current-pos-as-center?
                     (-> ^m/ThemeData theme .-colorScheme .-primary)
                     (-> ^m/ThemeData theme .-colorScheme .-secondary)))))

;; around me main screen
;; a map with
;; - current position marker centered
;; - my location button to recenter map on current position
;; - a scalebar
;; - markers for selected pois in a 5km radius around current
;; position

(defn around-me-screen []
  (f/widget
   :let [scaffold-key (#/(m/GlobalKey m/ScaffoldState))]
   :bind {:map-state (map/new-state)}
   :get [:map-state m/Theme]
   :managed [dms (-> map-state map/->state-streams map/init!) :dispose map/dispose!]
   :watch [{:keys [align-position-on-update current-pos-as-center? current-center]} map-state]
   (m/Scaffold
    .key scaffold-key
    .appBar (app-bar :additional-actions
                     [(m/IconButton .icon (m/Icon m/Icons.layers)
                                    .tooltip "layers"
                                    .onPressed #(-> scaffold-key
                                                    .-currentState
                                                    .openEndDrawer))])
    .drawer (drawer)
    .endDrawer (around-me-enddrawer)
    .body
    (fmap/FlutterMap
     .options (fmap/MapOptions
               .initialZoom 14
               .initialCenter (if debug-mode? vertouplage icicommencelaventure)
               .minZoom 0
               .maxZoom 18
               .onLongPress (fn [_ ^LatLng point]
                              (map/new-center! dms [(.-latitude point) (.-longitude point)]))

               ;; Stop aligning the location marker to the center of the map widget
               ;; if user interacted with the map
               .onPositionChanged (fn [_ hasGesture] (when hasGesture (map/stop-alignment! dms))))
     .children
     [(fmap/TileLayer
       .urlTemplate "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
       .userAgentPackageName "club.bhikers"
       .tileProvider (CancellableNetworkTileProvider)
       .maxZoom 18)
      (around-me-pois-markers-widget)
      (maploc/CurrentLocationLayer
       .style (new-current-location-marker-style current-pos-as-center? theme)
       .positionStream (map/location-marker-stream dms)
       .alignPositionStream (map/align-position-stream dms)
       .alignPositionOnUpdate align-position-on-update
       .followOnLocationUpdate maploc/FollowOnLocationUpdate.always
       .alignDirectionOnUpdate maploc/AlignOnUpdate.never)
      (map/control-buttons :alignment m/Alignment.bottomRight
                           :onMyLocation (map/align-on-current-pos-callback dms))
      (fmap/Scalebar
       .textStyle (m/TextStyle .color m/Colors.black .fontSize 14)
       .alignment m/Alignment.bottomLeft
       .length fmap/ScalebarLength.m)
      (MapCompass.cupertino .alignment m/Alignment.topLeft)
      (new-current-center-marker current-pos-as-center? current-center)
      (map/msg)]))))
