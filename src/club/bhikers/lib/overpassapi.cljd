(ns club.bhikers.lib.overpassapi
  (:require
   [clojure.string :refer [replace]]
   ["package:dio/dio.dart" :as dio]
   ["package:dio_cache_interceptor/dio_cache_interceptor.dart" :as cache]
   [club.bhikers.lib.notifications :refer [debug-notif]]
   [club.bhikers.lib.app :refer [api-query-timeout]]
   [club.bhikers.lib.utils :refer [uuid-v5
                                   create-cache-store
                                   create-dio-instance]]

   [club.bhikers.lib.logging :as logging]))



(defprotocol disposable-overpass-api
  (dispose! [this])
  (query [this type lat lon osm-tags radius]))

(defn quote-key [^String s] (replace s #"(.*)=" "\"$1\"="))

;; overpass api whi cache queries without a ttl.
;; it will try overpass-api.de and fallback to maps.mail.ru if there's an issue or timeout
;; which are both public instances
;; see https://wiki.openstreetmap.org/wiki/Overpass_API#Public_Overpass_API_instances
(defn new-overpass-api []
  (let [cache-store (create-cache-store 20 (* 1024 1024))
        apis {:instance1 (create-dio-instance :base-url "https://overpass-api.de/api/interpreter?"
                                              :query-timeout  (Duration .seconds @api-query-timeout)
                                              :with-log? false
                                              :cache-store cache-store)
              :instance2 (create-dio-instance :base-url "https://maps.mail.ru/osm/tools/overpass/api/interpreter?"
                                              :query-timeout  (Duration .seconds @api-query-timeout)
                                              :with-log? false
                                              :cache-store cache-store)}]

    (reify disposable-overpass-api
      (dispose! [this]
        (.close cache-store)
        (.close ^dio/Dio (get apis :instance1))
        (.close ^dio/Dio (get apis :instance2))
        this)
      (query [_ type lat lon osm-tags radius]
        (let [tags-query (apply str (interpose ";" (map #(str type "[" (quote-key %) "](around:" radius "," lat "," lon ")") osm-tags)))
              query (str "data=[out:json][timeout:" @api-query-timeout "];(" tags-query ";);" (if (= type "way") "(._;>;);" "") "out;")
              try-request (fn [api-instance]
                            (try
                              (logging/d "Will request: " (-> ^dio/Dio api-instance .-options .-baseUrl) query)
                              (await (.get ^dio/Dio api-instance query))
                              (catch dio/DioException e
                                (do (logging/d "Exception! " e)
                                    nil))))
              response (or (await (try-request (get apis :instance1)))
                           (await (try-request (get apis :instance2))))]
          (if (not response)
            (debug-notif "error requesting pois with tags: " osm-tags)
            (let [{{elements "elements"} .-data} ^dio/Response response]
              elements)))))))
