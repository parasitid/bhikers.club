(ns club.bhikers.lib.utils
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   ["package:dio_cache_interceptor/dio_cache_interceptor.dart" :as cache]
   ["package:easy_localization/easy_localization.dart" :as l10n]))

(defn l10n-str [& args] (apply str (map l10n/tr args)))

;; Setup dio instance with cache+log interceptors for overpass-api.de
;; dio is a lib for http requests
(defonce uuidgen (atom (uuid/Uuid)))

(defn uuid-v5 [url] (.v5 ^uuid/Uuid @uuidgen uuid/Uuid.NAMESPACE_URL url))

(defn uuid-v4 [] (.v4 ^uuid/Uuid @uuidgen))

(defn create-cache-store ^cache/MemCacheStore [max-nb-of-entries max-entry-size]
  (cache/MemCacheStore .maxSize (* max-nb-of-entries max-entry-size) .maxEntrySize max-entry-size))

(defn str->int [s min max] (let [num (int/tryParse s)] (if (and num (< min num max)) num nil)))
