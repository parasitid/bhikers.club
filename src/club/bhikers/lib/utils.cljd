(ns club.bhikers.lib.utils
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   ["package:dio/dio.dart" :as dio]
   ["package:dio_cache_interceptor/dio_cache_interceptor.dart" :as cache]
   ["package:geolocator/geolocator.dart" :as geo]
   ["package:easy_localization/easy_localization.dart" :as l10n]))

(defn l10n-str [& args] (apply str (map l10n/tr args)))

;; Setup dio instance with cache+log interceptors for overpass-api.de
;; dio is a lib for http requests
(defonce uuidgen (atom (uuid/Uuid)))

(defn uuid-v5 [url] (.v5 ^uuid/Uuid @uuidgen uuid/Uuid.NAMESPACE_URL url))

(defn uuid-v4 [] (.v4 ^uuid/Uuid @uuidgen))

(defn create-cache-store ^cache/MemCacheStore [max-nb-of-entries max-entry-size]
  (cache/MemCacheStore .maxSize (* max-nb-of-entries max-entry-size) .maxEntrySize max-entry-size))

(defn str->int [s min max] (let [num (int/tryParse s)] (if (and num (< min num max)) num nil)))

(defn str->location-accuracy [s]
  (cond
    (= s "low") geo/LocationAccuracy.low
    (= s "medium") geo/LocationAccuracy.medium
    (= s "high") geo/LocationAccuracy.high
    :else nil))

(defn location-accuracy->str [a]
  (cond
    (= a geo/LocationAccuracy.low) "low"
    (= a geo/LocationAccuracy.medium) "medium"
    (= a geo/LocationAccuracy.high) "high"
    :else nil))

(defn create-dio-instance ^dio/Dio [
                                    & {:keys [base-url
                                              query-timeout
                                              cache-store
                                              with-log?]
                                       :or {base-url nil
                                            query-timeout (Duration .seconds 2)
                                            cache-store nil
                                            with-log? false}}]
  (let [api (dio/Dio
             (if base-url
               (dio/BaseOptions .baseUrl base-url
                                .connectTimeout query-timeout .receiveTimeout query-timeout)
               (dio/BaseOptions .connectTimeout query-timeout .receiveTimeout query-timeout)))]
    (when cache-store
      (.add (.-interceptors api)
            (cache/DioCacheInterceptor
             .options (cache/CacheOptions
                       .store cache-store
                       .policy cache/CachePolicy.forceCache
                       .hitCacheOnErrorExcept [401 403]
                       .maxStale (Duration .days 1)
                       .priority cache/CachePriority.normal
                       .allowPostMethod false
                       .keyBuilder (fn [^dio/RequestOptions req-opts]
                                     (let [cache-key (->> req-opts
                                                          .-uri
                                                          .toString
                                                          (uuid-v5))]
                                       cache-key))))))
    (when with-log?
      (.add (.-interceptors api)
            (dio/LogInterceptor)))
    api))

