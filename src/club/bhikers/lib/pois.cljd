(ns club.bhikers.lib.pois
  (:require
   ["package:url_launcher/url_launcher.dart" :refer [canLaunchUrl launchUrl LaunchMode]]
   ["package:maps_launcher/maps_launcher.dart" :refer [MapsLauncher]]
   [club.bhikers.lib.utils :refer [log]]
   [club.bhikers.lib.overpassapi :as oapi]))

(defonce poi-types->osm-tags {"shelters" "amenity=shelter"
                              "hotels" "tourism=hotel"
                              "campsites" "tourism=camp_site"
                              "restaurants" "amenity=restaurant"
                              "bakeries" "shop=bakery"
                              "bikeshops" "shop=bicycle"
                              "bottlerefills" "fountain=bottle_refill"
                              "toilets" "amenity=toilets"})

(defn poi-type->osm-tag [type] (get poi-types->osm-tags type false))


(defn dynamic-map-pois [map-state overpass-api]
  (let [pois (atom [])]
    (add-watch map-state :refresh-pois
               (fn [_ _ old-state new-state]
                 (when (not= (select-keys old-state [:radius :selected-poi-type :current-pos :current-center :current-pos-as-center?])
                             (select-keys new-state [:radius :selected-poi-type :current-pos :current-center :current-pos-as-center?]))
                   (log "refreshing pois!")
                   (let [{:keys [radius selected-poi-type current-pos current-center current-pos-as-center?]} new-state]
                     (when (or (and current-pos-as-center? current-pos) current-center)
                       (let [results (await (oapi/query overpass-api
                                                   (if (and current-pos-as-center? current-pos) current-pos current-center)
                                                   (poi-type->osm-tag selected-poi-type)
                                                   radius))]
                         (if results
                           (reset! pois results)
                           (log "no pois fetched! map-state was: " new-state))))))))
    pois))

(defn route-to-poi [poi]
  (-> MapsLauncher (.launchCoordinates (get poi "lat") (get poi "lon"))))

(defn edit-poi [poi]
  (let [geoedit-uri (Uri.parse (str "geo:" (get poi "lat") "," (get poi "lon")))]
    (if (await (canLaunchUrl (Uri.parse "everydoor://")))
      (await (launchUrl geoedit-uri))
      (await (launchUrl (Uri.parse "https://every-door.app/")
                 .mode LaunchMode.externalApplication)))));)))
