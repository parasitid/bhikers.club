(ns club.bhikers.lib.overpass-api
  (:require
   ["package:dio/dio.dart" :as dio]
   ["package:dio_cache_interceptor/dio_cache_interceptor.dart" :as cache]
   [club.bhikers.lib.utils :refer [log uuid-v5]]))

(defonce poi-types->osm-tags {"shelters" "amenity=shelter"
                              "hotels" "tourism=hotel"
                              "campsites" "tourism=camp_site"
                              "restaurants" "amenity=restaurant"
                              "bakeries" "shop=bakery"
                              "bikeshops" "shop=bicycle"
                              "bottlerefills" "fountain=bottle_refill"
                              "toilets" "amenity=toilets"})

(defn poi-type->osm-tag [type] (get poi-types->osm-tags type false))

(defn create-dio-instance ^dio/Dio [base-url cache-store]
  (log "create dio instance for url " base-url)
  (let [api (dio/Dio
             (dio/BaseOptions .baseUrl base-url
                              .connectTimeout (Duration .seconds 5)
                              .receiveTimeout (Duration .seconds 5)))]
    (doto (.-interceptors api)
      (.add (cache/DioCacheInterceptor
             .options (cache/CacheOptions
                       .store cache-store
                       .policy cache/CachePolicy.forceCache
                       .hitCacheOnErrorExcept [401 403]
                       .maxStale (Duration .days 1)
                       .priority cache/CachePriority.normal
                       .allowPostMethod false
                       .keyBuilder (fn [^dio/RequestOptions req-opts]
                                     (let [cache-key (->> req-opts
                                                          .-uri
                                                          .toString
                                                          (uuid-v5))]
                                       cache-key)))))
      (.add (dio/LogInterceptor)))
    api))

(defn new-overpass-api ^dio/Dio [cache-store]
  (create-dio-instance "https://overpass-api.de/api/interpreter?" cache-store))

(defn overpass-query [api [lat lon] poi-type & {:keys [radius] :or {radius 5000}}]
  (let [osm-tag (poi-type->osm-tag poi-type)
        query (str "data=[out:json];node[" osm-tag "](around:" radius "," lat "," lon ");out;")
        response (try
                   (log "Will request overpass-api.de with " query)
                   (await (.get ^dio/Dio api query))
                   (catch dio/DioException e
                     (do (log "Exception! " e)
                         nil)))]
    (when response
      (let [{{elements "elements"} .-data} ^dio/Response response]
       (log "elements fetched from api: " elements)
       elements))))
