(ns club.bhikers.map
  "Zoom buttons widget"
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter_map/flutter_map.dart" :as map]
            [cljd.flutter :as f]))

(defn map-msg [& {:keys [alignment bottom-padding]
                       :or {
                            alignment m/Alignment.bottomCenter
                            bottom-padding 50}}]
  (f/widget
   :get [:map-state]
   :watch [{:keys [message]} map-state]
   (m/Align .alignment alignment)
   (if message
     (f/widget
      (m/Padding .padding (m/EdgeInsets.only .bottom bottom-padding))
      (f/widget
       (m/Container .decoration (m/BoxDecoration .color m/Colors.white
                                                 .border (m/Border.all)
                                                 .borderRadius (m/BorderRadius.circular 5)))
       (f/widget
        (m/Padding .padding (m/EdgeInsets.all 5))
        (m/Text message .overflow m/TextOverflow.ellipsis))))
     (m/Container))))


(defn map-control-buttons [ & {:keys [minZoom
                                      maxZoom
                                      mini
                                      padding
                                      alignment
                                      zoomInColor
                                      zoomInColorIcon
                                      zoomInIcon
                                      zoomOutColor
                                      zoomOutColorIcon
                                      zoomOutIcon
                                      myLocationColor
                                      myLocationColorIcon
                                      myLocationIcon
                                      onMyLocation]
                               :or {minZoom 1
                                    maxZoom 18
                                    mini false
                                    padding 2.0
                                    alignment m/Alignment.topRight
                                    zoomInColor nil
                                    zoomInColorIcon nil
                                    zoomInIcon m/Icons.zoom_in
                                    zoomOutColor nil
                                    zoomOutColorIcon nil
                                    zoomOutIcon  m/Icons.zoom_out
                                    myLocationColor nil
                                    myLocationColorIcon nil
                                    myLocationIcon  m/Icons.my_location
                                    onMyLocation (fn [_ _] nil)}}]
  (f/widget
   :get [map/MapController
         map/MapCamera
         m/Theme]
   (m/Align .alignment alignment)
   (m/Column
    .mainAxisSize m/MainAxisSize.min
    .children
    [(m/Padding .padding (m/EdgeInsets.only .left padding .top padding .right padding)
                .child (m/FloatingActionButton
                        .heroTag "zoomInButton"
                        .mini mini
                        .backgroundColor (or zoomInColor (.-primaryColorLight theme))
                        .onPressed (fn [] (-> map-controller (.move (.-center map-camera) (min (inc (.-zoom map-camera)) maxZoom)))
                                     nil)
                        .child (m/Icon zoomInIcon .color (or zoomInColorIcon (-> theme .-iconTheme .-color)))))
     (m/Padding .padding (m/EdgeInsets.only .left padding .top padding .right padding)
                .child (m/FloatingActionButton
                        .heroTag "zoomOutButton"
                        .mini mini
                        .backgroundColor (or zoomOutColor (.-primaryColorLight theme))
                        .onPressed (fn [] (-> map-controller (.move (.-center map-camera) (max (dec (.-zoom map-camera)) minZoom)))
                                     nil)
                        .child (m/Icon zoomOutIcon .color (or zoomOutColorIcon (-> theme .-iconTheme .-color)))))
     (m/Padding .padding (m/EdgeInsets.all padding)
                .child (m/FloatingActionButton
                        .heroTag "myLocationButton"
                        .mini mini
                        .backgroundColor (or myLocationColor (.-primaryColorLight theme))
                        .onPressed onMyLocation
                        .child (m/Icon myLocationIcon .color (or myLocationColorIcon (-> theme .-iconTheme .-color)))))])))
