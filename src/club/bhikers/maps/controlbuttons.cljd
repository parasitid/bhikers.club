(ns club.bhikers.maps.controlbuttons
  "Zoom buttons widget"
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter_map_location_marker/flutter_map_location_marker.dart" :as maploc]
            ["package:flutter_map/flutter_map.dart" :as map]
            ["dart:async" :as async]
            [cljd.flutter :as f]))

(defn control-buttons [ & {:keys [minZoom
                                  maxZoom
                                  mini
                                  padding
                                  alignment
                                  zoomInColor
                                  zoomInColorIcon
                                  zoomInIcon
                                  zoomOutColor
                                  zoomOutColorIcon
                                  zoomOutIcon
                                  recenterColor
                                  recenterColorIcon
                                  recenterIcon]
                           :or {minZoom 1
                                maxZoom 18
                                mini false
                                padding 2.0
                                alignment m/Alignment.topRight
                                zoomInColor nil
                                zoomInColorIcon nil
                                zoomInIcon m/Icons.zoom_in
                                zoomOutColor nil
                                zoomOutColorIcon nil
                                zoomOutIcon  m/Icons.zoom_out
                                recenterColor nil
                                recenterColorIcon nil
                                recenterIcon  m/Icons.my_location}}]
  (f/widget
   :get [map/MapController
         map/MapCamera
         m/Theme
         :align-position-stream-controller
         :map-state]
   (m/Align .alignment alignment)
   (m/Column
    .mainAxisSize m/MainAxisSize.min
    .children
    [(m/Padding .padding (m/EdgeInsets.only .left padding .top padding .right padding)
                .child (m/FloatingActionButton
                        .heroTag "zoomInButton"
                        .mini mini
                        .backgroundColor (or zoomInColor (.-primaryColorLight theme))
                        .onPressed (fn [] (-> map-controller (.move (.-center map-camera) (min (inc (.-zoom map-camera)) maxZoom)))
                                     nil)
                        .child (m/Icon zoomInIcon .color (or zoomInColorIcon (-> theme .-iconTheme .-color)))))
     (m/Padding .padding (m/EdgeInsets.only .left padding .top padding .right padding)
                .child (m/FloatingActionButton
                        .heroTag "zoomOutButton"
                        .mini mini
                        .backgroundColor (or zoomOutColor (.-primaryColorLight theme))
                        .onPressed (fn [] (-> map-controller (.move (.-center map-camera) (max (dec (.-zoom map-camera)) minZoom)))
                                     nil)
                        .child (m/Icon zoomOutIcon .color (or zoomOutColorIcon (-> theme .-iconTheme .-color)))))
     (m/Padding .padding (m/EdgeInsets.all padding)
                .child (m/FloatingActionButton
                        .heroTag "recenterButton"
                        .mini mini
                        .backgroundColor (or recenterColor (.-primaryColorLight theme))
                        .onPressed (fn [] (do
                                            (.add ^#/(async/StreamController double?) @align-position-stream-controller 12.0)
                                            (swap! map-state assoc :align-position-on-update maploc/AlignOnUpdate.never)))
                        .child (m/Icon recenterIcon .color (or recenterColorIcon (-> theme .-iconTheme .-color)))))])))
